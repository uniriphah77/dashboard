# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MUnvSweVl7LWQplIhh9j4H6Fr70V5qrA
"""

!pip install ipywidgets

import pandas as pd
import ipywidgets as widgets
from IPython.display import display, clear_output

# ‚Äî‚Äî‚Äî Sample product catalog ‚Äî‚Äî‚Äî
products = pd.DataFrame([
    {"id": 1, "name": "Wireless Mouse",     "description": "Ergonomic wireless mouse",      "price": 25.99},
    {"id": 2, "name": "Mechanical Keyboard","description": "RGB backlit mechanical keyboard","price": 79.99},
    {"id": 3, "name": "HD Webcam",          "description": "1080p video conferencing cam",  "price": 49.99},
    {"id": 4, "name": "USB-C Hub",          "description": "5-in-1 multiport USB-C hub",   "price": 34.99},
    {"id": 5, "name": "Noise-Cancelling Headphones", "description": "Over-ear ANC headphones", "price": 129.99},
])

cart = []

# ‚Äî‚Äî‚Äî Widgets setup ‚Äî‚Äî‚Äî
product_dropdown = widgets.Dropdown(
    options=[(row['name'], row['id']) for _, row in products.iterrows()],
    description='Product:',
    layout=widgets.Layout(width='50%')
)

quantity_slider = widgets.IntSlider(
    value=1, min=1, max=10, step=1, description='Quantity:'
)

add_button   = widgets.Button(description='Add to Cart', button_style='success')
checkout_btn = widgets.Button(description='Checkout',   button_style='info')
clear_btn    = widgets.Button(description='Clear Cart', button_style='warning')

product_details = widgets.Output()
cart_output    = widgets.Output()
message_output = widgets.Output()

# ‚Äî‚Äî‚Äî Functions ‚Äî‚Äî‚Äî
def show_product_details(change=None):
    prod = products.loc[products.id == product_dropdown.value].iloc[0]
    with product_details:
        clear_output()
        print(f"Name:        {prod.name}")
        print(f"Description: {prod.description}")
        print(f"Price:       ${prod.price:.2f}")

def update_cart_display():
    with cart_output:
        clear_output()
        if not cart:
            print("Cart is empty.")
        else:
            df = pd.DataFrame(cart)
            df['total'] = df.price * df.quantity
            display(df[['name','quantity','price','total']].rename(columns={
                'name':'Product','quantity':'Qty','price':'Unit Price','total':'Total'
            }))
            print(f"Grand Total: ${df['total'].sum():.2f}")

def add_to_cart(b):
    prod = products.loc[products.id == product_dropdown.value].iloc[0]
    cart.append({
        "id":       prod.id,
        "name":     prod.name,
        "price":    prod.price,
        "quantity": quantity_slider.value
    })
    update_cart_display()
    with message_output:
        clear_output()
        print(f"Added {quantity_slider.value}√ó {prod.name} to cart.")

def checkout(b):
    with message_output:
        clear_output()
        if not cart:
            print("Your cart is empty. Add items first.")
        else:
            total = sum(item['price'] * item['quantity'] for item in cart)
            print(f"‚úÖ Thank you! Your purchase total is: ${total:.2f}")
            cart.clear()
            update_cart_display()

def clear_cart(b):
    cart.clear()
    update_cart_display()
    with message_output:
        clear_output()
        print("üóëÔ∏è Cart cleared.")

# ‚Äî‚Äî‚Äî Wire up events ‚Äî‚Äî‚Äî
product_dropdown.observe(show_product_details, names='value')
add_button.on_click(add_to_cart)
checkout_btn.on_click(checkout)
clear_btn.on_click(clear_cart)

# ‚Äî‚Äî‚Äî Render the UI ‚Äî‚Äî‚Äî
ui = widgets.VBox([
    widgets.HBox([product_dropdown, quantity_slider, add_button]),
    product_details,
    widgets.HTML("<hr>"),
    widgets.HBox([checkout_btn, clear_btn]),
    cart_output,
    widgets.HTML("<hr>"),
    message_output
])

# Initial calls & display
show_product_details()
update_cart_display()
display(ui)